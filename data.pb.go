// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of QuestType from enums.proto

// Ignoring public import of EncounterType from enums.proto

// Ignoring public import of Filter from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of Costume from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of Form from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of Slot from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of ItemAward from inventory_item.proto

// Ignoring public import of ItemData from inventory_item.proto

// Ignoring public import of ItemType from inventory_item.proto

// Ignoring public import of ItemId from inventory_item.proto

// Ignoring public import of PlayerPublicProfile from data_player.proto

// Ignoring public import of PlayerCurrency from data_player.proto

// Ignoring public import of Currency from data_player.proto

// Ignoring public import of PlayerAvatar from data_player.proto

// Ignoring public import of ContactSettings from data_player.proto

// Ignoring public import of PlayerCamera from data_player.proto

// Ignoring public import of EquippedBadge from data_player.proto

// Ignoring public import of PlayerStats from data_player.proto

// Ignoring public import of DailyBonus from data_player.proto

// Ignoring public import of PlayerAvatarType from data_player.proto

// Ignoring public import of PokeCandy from data_redeem.proto

// Ignoring public import of RedeemedItem from data_redeem.proto

// Ignoring public import of RedeemedAvatarItem from data_redeem.proto

type PokedexEntry struct {
	PokemonId            PokemonId `protobuf:"varint,1,opt,name=pokemon_id,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	TimesEncountered     int32     `protobuf:"varint,2,opt,name=times_encountered" json:"times_encountered,omitempty"`
	TimesCaptured        int32     `protobuf:"varint,3,opt,name=times_captured" json:"times_captured,omitempty"`
	EvolutionStonePieces int32     `protobuf:"varint,4,opt,name=evolution_stone_pieces" json:"evolution_stone_pieces,omitempty"`
	EvolutionStones      int32     `protobuf:"varint,5,opt,name=evolution_stones" json:"evolution_stones,omitempty"`
	CapturedCostumes     []Costume `protobuf:"varint,6,rep,packed,name=captured_costumes,enum=POGOProtos.Enums.Costume" json:"captured_costumes,omitempty"`
	CapturedForms        []Form    `protobuf:"varint,7,rep,packed,name=captured_forms,enum=POGOProtos.Enums.Form" json:"captured_forms,omitempty"`
	CapturedGenders      []Gender  `protobuf:"varint,8,rep,packed,name=captured_genders,enum=POGOProtos.Enums.Gender" json:"captured_genders,omitempty"`
	CapturedShiny        bool      `protobuf:"varint,9,opt,name=captured_shiny" json:"captured_shiny,omitempty"`
	EncounteredCostumes  []Costume `protobuf:"varint,10,rep,packed,name=encountered_costumes,enum=POGOProtos.Enums.Costume" json:"encountered_costumes,omitempty"`
	EncounteredForms     []Form    `protobuf:"varint,11,rep,packed,name=encountered_forms,enum=POGOProtos.Enums.Form" json:"encountered_forms,omitempty"`
	EncounteredGenders   []Gender  `protobuf:"varint,12,rep,packed,name=encountered_genders,enum=POGOProtos.Enums.Gender" json:"encountered_genders,omitempty"`
	EncounteredShiny     bool      `protobuf:"varint,13,opt,name=encountered_shiny" json:"encountered_shiny,omitempty"`
}

func (m *PokedexEntry) Reset()                    { *m = PokedexEntry{} }
func (m *PokedexEntry) String() string            { return proto.CompactTextString(m) }
func (*PokedexEntry) ProtoMessage()               {}
func (*PokedexEntry) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

type DownloadUrlEntry struct {
	AssetId  string `protobuf:"bytes,1,opt,name=asset_id" json:"asset_id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Size     int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Checksum uint32 `protobuf:"fixed32,4,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *DownloadUrlEntry) Reset()                    { *m = DownloadUrlEntry{} }
func (m *DownloadUrlEntry) String() string            { return proto.CompactTextString(m) }
func (*DownloadUrlEntry) ProtoMessage()               {}
func (*DownloadUrlEntry) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{1} }

type PokemonDisplay struct {
	Costume Costume `protobuf:"varint,1,opt,name=costume,enum=POGOProtos.Enums.Costume" json:"costume,omitempty"`
	Gender  Gender  `protobuf:"varint,2,opt,name=gender,enum=POGOProtos.Enums.Gender" json:"gender,omitempty"`
	Shiny   bool    `protobuf:"varint,3,opt,name=shiny" json:"shiny,omitempty"`
	Form    Form    `protobuf:"varint,4,opt,name=form,enum=POGOProtos.Enums.Form" json:"form,omitempty"`
}

func (m *PokemonDisplay) Reset()                    { *m = PokemonDisplay{} }
func (m *PokemonDisplay) String() string            { return proto.CompactTextString(m) }
func (*PokemonDisplay) ProtoMessage()               {}
func (*PokemonDisplay) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{2} }

type PlayerBadge struct {
	BadgeType    BadgeType `protobuf:"varint,1,opt,name=badge_type,enum=POGOProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	Rank         int32     `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	StartValue   int32     `protobuf:"varint,3,opt,name=start_value" json:"start_value,omitempty"`
	EndValue     int32     `protobuf:"varint,4,opt,name=end_value" json:"end_value,omitempty"`
	CurrentValue float64   `protobuf:"fixed64,5,opt,name=current_value" json:"current_value,omitempty"`
}

func (m *PlayerBadge) Reset()                    { *m = PlayerBadge{} }
func (m *PlayerBadge) String() string            { return proto.CompactTextString(m) }
func (*PlayerBadge) ProtoMessage()               {}
func (*PlayerBadge) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{3} }

type ClientVersion struct {
	MinVersion string `protobuf:"bytes,1,opt,name=min_version" json:"min_version,omitempty"`
}

func (m *ClientVersion) Reset()                    { *m = ClientVersion{} }
func (m *ClientVersion) String() string            { return proto.CompactTextString(m) }
func (*ClientVersion) ProtoMessage()               {}
func (*ClientVersion) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{4} }

type PokemonData struct {
	Id                     uint64          `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	PokemonId              PokemonId       `protobuf:"varint,2,opt,name=pokemon_id,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	Cp                     int32           `protobuf:"varint,3,opt,name=cp" json:"cp,omitempty"`
	Stamina                int32           `protobuf:"varint,4,opt,name=stamina" json:"stamina,omitempty"`
	StaminaMax             int32           `protobuf:"varint,5,opt,name=stamina_max" json:"stamina_max,omitempty"`
	Move_1                 PokemonMove     `protobuf:"varint,6,opt,name=move_1,enum=POGOProtos.Enums.PokemonMove" json:"move_1,omitempty"`
	Move_2                 PokemonMove     `protobuf:"varint,7,opt,name=move_2,enum=POGOProtos.Enums.PokemonMove" json:"move_2,omitempty"`
	DeployedFortId         string          `protobuf:"bytes,8,opt,name=deployed_fort_id" json:"deployed_fort_id,omitempty"`
	OwnerName              string          `protobuf:"bytes,9,opt,name=owner_name" json:"owner_name,omitempty"`
	IsEgg                  bool            `protobuf:"varint,10,opt,name=is_egg" json:"is_egg,omitempty"`
	EggKmWalkedTarget      float64         `protobuf:"fixed64,11,opt,name=egg_km_walked_target" json:"egg_km_walked_target,omitempty"`
	EggKmWalkedStart       float64         `protobuf:"fixed64,12,opt,name=egg_km_walked_start" json:"egg_km_walked_start,omitempty"`
	Origin                 int32           `protobuf:"varint,14,opt,name=origin" json:"origin,omitempty"`
	HeightM                float32         `protobuf:"fixed32,15,opt,name=height_m" json:"height_m,omitempty"`
	WeightKg               float32         `protobuf:"fixed32,16,opt,name=weight_kg" json:"weight_kg,omitempty"`
	IndividualAttack       int32           `protobuf:"varint,17,opt,name=individual_attack" json:"individual_attack,omitempty"`
	IndividualDefense      int32           `protobuf:"varint,18,opt,name=individual_defense" json:"individual_defense,omitempty"`
	IndividualStamina      int32           `protobuf:"varint,19,opt,name=individual_stamina" json:"individual_stamina,omitempty"`
	CpMultiplier           float32         `protobuf:"fixed32,20,opt,name=cp_multiplier" json:"cp_multiplier,omitempty"`
	Pokeball               ItemId          `protobuf:"varint,21,opt,name=pokeball,enum=POGOProtos.Inventory.Item.ItemId" json:"pokeball,omitempty"`
	CapturedCellId         uint64          `protobuf:"varint,22,opt,name=captured_cell_id" json:"captured_cell_id,omitempty"`
	BattlesAttacked        int32           `protobuf:"varint,23,opt,name=battles_attacked" json:"battles_attacked,omitempty"`
	BattlesDefended        int32           `protobuf:"varint,24,opt,name=battles_defended" json:"battles_defended,omitempty"`
	EggIncubatorId         string          `protobuf:"bytes,25,opt,name=egg_incubator_id" json:"egg_incubator_id,omitempty"`
	CreationTimeMs         uint64          `protobuf:"varint,26,opt,name=creation_time_ms" json:"creation_time_ms,omitempty"`
	NumUpgrades            int32           `protobuf:"varint,27,opt,name=num_upgrades" json:"num_upgrades,omitempty"`
	AdditionalCpMultiplier float32         `protobuf:"fixed32,28,opt,name=additional_cp_multiplier" json:"additional_cp_multiplier,omitempty"`
	Favorite               int32           `protobuf:"varint,29,opt,name=favorite" json:"favorite,omitempty"`
	Nickname               string          `protobuf:"bytes,30,opt,name=nickname" json:"nickname,omitempty"`
	FromFort               int32           `protobuf:"varint,31,opt,name=from_fort" json:"from_fort,omitempty"`
	BuddyCandyAwarded      int32           `protobuf:"varint,32,opt,name=buddy_candy_awarded" json:"buddy_candy_awarded,omitempty"`
	BuddyTotalKmWalked     float32         `protobuf:"fixed32,33,opt,name=buddy_total_km_walked" json:"buddy_total_km_walked,omitempty"`
	DisplayPokemonId       int32           `protobuf:"varint,34,opt,name=display_pokemon_id" json:"display_pokemon_id,omitempty"`
	DisplayCp              int32           `protobuf:"varint,35,opt,name=display_cp" json:"display_cp,omitempty"`
	PokemonDisplay         *PokemonDisplay `protobuf:"bytes,36,opt,name=pokemon_display" json:"pokemon_display,omitempty"`
}

func (m *PokemonData) Reset()                    { *m = PokemonData{} }
func (m *PokemonData) String() string            { return proto.CompactTextString(m) }
func (*PokemonData) ProtoMessage()               {}
func (*PokemonData) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{5} }

func (m *PokemonData) GetPokemonDisplay() *PokemonDisplay {
	if m != nil {
		return m.PokemonDisplay
	}
	return nil
}

type PlayerData struct {
	CreationTimestampMs     int64            `protobuf:"varint,1,opt,name=creation_timestamp_ms" json:"creation_timestamp_ms,omitempty"`
	Username                string           `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Team                    TeamColor        `protobuf:"varint,5,opt,name=team,enum=POGOProtos.Enums.TeamColor" json:"team,omitempty"`
	TutorialState           []TutorialState  `protobuf:"varint,7,rep,packed,name=tutorial_state,enum=POGOProtos.Enums.TutorialState" json:"tutorial_state,omitempty"`
	Avatar                  *PlayerAvatar    `protobuf:"bytes,8,opt,name=avatar" json:"avatar,omitempty"`
	MaxPokemonStorage       int32            `protobuf:"varint,9,opt,name=max_pokemon_storage" json:"max_pokemon_storage,omitempty"`
	MaxItemStorage          int32            `protobuf:"varint,10,opt,name=max_item_storage" json:"max_item_storage,omitempty"`
	DailyBonus              *DailyBonus      `protobuf:"bytes,11,opt,name=daily_bonus" json:"daily_bonus,omitempty"`
	EquippedBadge           *EquippedBadge   `protobuf:"bytes,12,opt,name=equipped_badge" json:"equipped_badge,omitempty"`
	ContactSettings         *ContactSettings `protobuf:"bytes,13,opt,name=contact_settings" json:"contact_settings,omitempty"`
	Currencies              []*Currency      `protobuf:"bytes,14,rep,name=currencies" json:"currencies,omitempty"`
	RemainingCodenameClaims int32            `protobuf:"varint,15,opt,name=remaining_codename_claims" json:"remaining_codename_claims,omitempty"`
	BuddyPokemon            *BuddyPokemon    `protobuf:"bytes,16,opt,name=buddy_pokemon" json:"buddy_pokemon,omitempty"`
	BattleLockoutEndMs      int64            `protobuf:"varint,17,opt,name=battle_lockout_end_ms" json:"battle_lockout_end_ms,omitempty"`
	SecondaryPlayerAvatar   *PlayerAvatar    `protobuf:"bytes,18,opt,name=secondary_player_avatar" json:"secondary_player_avatar,omitempty"`
	NameIsBlacklisted       bool             `protobuf:"varint,19,opt,name=name_is_blacklisted" json:"name_is_blacklisted,omitempty"`
}

func (m *PlayerData) Reset()                    { *m = PlayerData{} }
func (m *PlayerData) String() string            { return proto.CompactTextString(m) }
func (*PlayerData) ProtoMessage()               {}
func (*PlayerData) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{6} }

func (m *PlayerData) GetAvatar() *PlayerAvatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *PlayerData) GetDailyBonus() *DailyBonus {
	if m != nil {
		return m.DailyBonus
	}
	return nil
}

func (m *PlayerData) GetEquippedBadge() *EquippedBadge {
	if m != nil {
		return m.EquippedBadge
	}
	return nil
}

func (m *PlayerData) GetContactSettings() *ContactSettings {
	if m != nil {
		return m.ContactSettings
	}
	return nil
}

func (m *PlayerData) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

func (m *PlayerData) GetBuddyPokemon() *BuddyPokemon {
	if m != nil {
		return m.BuddyPokemon
	}
	return nil
}

func (m *PlayerData) GetSecondaryPlayerAvatar() *PlayerAvatar {
	if m != nil {
		return m.SecondaryPlayerAvatar
	}
	return nil
}

type BackgroundToken struct {
	Token          []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpirationTime int64  `protobuf:"varint,2,opt,name=expiration_time" json:"expiration_time,omitempty"`
	Iv             []byte `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *BackgroundToken) Reset()                    { *m = BackgroundToken{} }
func (m *BackgroundToken) String() string            { return proto.CompactTextString(m) }
func (*BackgroundToken) ProtoMessage()               {}
func (*BackgroundToken) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{7} }

type AssetDigestEntry struct {
	AssetId    string `protobuf:"bytes,1,opt,name=asset_id" json:"asset_id,omitempty"`
	BundleName string `protobuf:"bytes,2,opt,name=bundle_name" json:"bundle_name,omitempty"`
	Version    int64  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Checksum   uint32 `protobuf:"fixed32,4,opt,name=checksum" json:"checksum,omitempty"`
	Size       int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Key        []byte `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AssetDigestEntry) Reset()                    { *m = AssetDigestEntry{} }
func (m *AssetDigestEntry) String() string            { return proto.CompactTextString(m) }
func (*AssetDigestEntry) ProtoMessage()               {}
func (*AssetDigestEntry) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{8} }

type BuddyPokemon struct {
	Id            uint64  `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	StartKmWalked float64 `protobuf:"fixed64,2,opt,name=start_km_walked" json:"start_km_walked,omitempty"`
	LastKmAwarded float64 `protobuf:"fixed64,3,opt,name=last_km_awarded" json:"last_km_awarded,omitempty"`
}

func (m *BuddyPokemon) Reset()                    { *m = BuddyPokemon{} }
func (m *BuddyPokemon) String() string            { return proto.CompactTextString(m) }
func (*BuddyPokemon) ProtoMessage()               {}
func (*BuddyPokemon) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{9} }

type RedeemPasscodeReward struct {
	Items       []*RedeemedItem       `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	AvatarItems []*RedeemedAvatarItem `protobuf:"bytes,2,rep,name=avatar_items" json:"avatar_items,omitempty"`
	EggPokemon  []*PokemonData        `protobuf:"bytes,3,rep,name=egg_pokemon" json:"egg_pokemon,omitempty"`
	Pokemon     []*PokemonData        `protobuf:"bytes,4,rep,name=pokemon" json:"pokemon,omitempty"`
	PokeCandy   []*PokeCandy          `protobuf:"bytes,5,rep,name=poke_candy" json:"poke_candy,omitempty"`
	Stardust    int32                 `protobuf:"varint,6,opt,name=stardust" json:"stardust,omitempty"`
	Pokecoins   int32                 `protobuf:"varint,7,opt,name=pokecoins" json:"pokecoins,omitempty"`
}

func (m *RedeemPasscodeReward) Reset()                    { *m = RedeemPasscodeReward{} }
func (m *RedeemPasscodeReward) String() string            { return proto.CompactTextString(m) }
func (*RedeemPasscodeReward) ProtoMessage()               {}
func (*RedeemPasscodeReward) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{10} }

func (m *RedeemPasscodeReward) GetItems() []*RedeemedItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *RedeemPasscodeReward) GetAvatarItems() []*RedeemedAvatarItem {
	if m != nil {
		return m.AvatarItems
	}
	return nil
}

func (m *RedeemPasscodeReward) GetEggPokemon() []*PokemonData {
	if m != nil {
		return m.EggPokemon
	}
	return nil
}

func (m *RedeemPasscodeReward) GetPokemon() []*PokemonData {
	if m != nil {
		return m.Pokemon
	}
	return nil
}

func (m *RedeemPasscodeReward) GetPokeCandy() []*PokeCandy {
	if m != nil {
		return m.PokeCandy
	}
	return nil
}

func init() {
	proto.RegisterType((*PokedexEntry)(nil), "POGOProtos.Data.PokedexEntry")
	proto.RegisterType((*DownloadUrlEntry)(nil), "POGOProtos.Data.DownloadUrlEntry")
	proto.RegisterType((*PokemonDisplay)(nil), "POGOProtos.Data.PokemonDisplay")
	proto.RegisterType((*PlayerBadge)(nil), "POGOProtos.Data.PlayerBadge")
	proto.RegisterType((*ClientVersion)(nil), "POGOProtos.Data.ClientVersion")
	proto.RegisterType((*PokemonData)(nil), "POGOProtos.Data.PokemonData")
	proto.RegisterType((*PlayerData)(nil), "POGOProtos.Data.PlayerData")
	proto.RegisterType((*BackgroundToken)(nil), "POGOProtos.Data.BackgroundToken")
	proto.RegisterType((*AssetDigestEntry)(nil), "POGOProtos.Data.AssetDigestEntry")
	proto.RegisterType((*BuddyPokemon)(nil), "POGOProtos.Data.BuddyPokemon")
	proto.RegisterType((*RedeemPasscodeReward)(nil), "POGOProtos.Data.RedeemPasscodeReward")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 1524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0xef, 0x6e, 0x1b, 0xb9,
	0x11, 0xaf, 0x24, 0xff, 0x91, 0x67, 0x65, 0x49, 0x5e, 0x3b, 0x31, 0xed, 0x24, 0x17, 0x45, 0x4d,
	0x51, 0xf5, 0x80, 0x73, 0x11, 0x25, 0x87, 0x2b, 0x50, 0x14, 0x68, 0xfc, 0xa7, 0x87, 0x00, 0x2d,
	0x4e, 0xbd, 0x4b, 0xfb, 0xa1, 0x5f, 0x08, 0x6a, 0x77, 0xb2, 0x21, 0xb4, 0x4b, 0xaa, 0x24, 0x57,
	0x8e, 0xfa, 0x0a, 0x7d, 0x84, 0xf6, 0x59, 0xfa, 0x02, 0x7d, 0x88, 0xbe, 0x4a, 0xc1, 0xe1, 0xae,
	0x2c, 0x25, 0x51, 0x72, 0xf7, 0xc5, 0x92, 0x38, 0xbf, 0x21, 0x87, 0x33, 0xf3, 0xfb, 0x0d, 0x0d,
	0x90, 0x0a, 0x27, 0x2e, 0xe6, 0x46, 0x3b, 0x1d, 0xf7, 0x26, 0xdf, 0x7d, 0xfb, 0xdd, 0xc4, 0x7f,
	0xb5, 0x17, 0xd7, 0xc2, 0x89, 0xf3, 0x08, 0x55, 0x59, 0xd8, 0x60, 0x3d, 0x3f, 0x91, 0x6a, 0x81,
	0xca, 0x69, 0xb3, 0xe4, 0xd2, 0x61, 0x51, 0xad, 0x1e, 0x79, 0x7f, 0x3e, 0xcf, 0xc5, 0x12, 0xcd,
	0xc6, 0x92, 0xc1, 0x14, 0x6b, 0xd4, 0xf0, 0xdf, 0x3b, 0xd0, 0x99, 0xe8, 0x19, 0xa6, 0xf8, 0xee,
	0x46, 0x39, 0xb3, 0x8c, 0x7f, 0x0d, 0x30, 0xd7, 0x33, 0x2c, 0xb4, 0xe2, 0x32, 0x65, 0x8d, 0x41,
	0x63, 0xd4, 0x1d, 0x3f, 0xb8, 0x58, 0x3b, 0xff, 0x86, 0x4e, 0x9e, 0x04, 0xcc, 0xab, 0x34, 0x3e,
	0x83, 0x23, 0x27, 0x0b, 0xb4, 0x1c, 0x55, 0xa2, 0x4b, 0xe5, 0xd0, 0x60, 0xca, 0x9a, 0x83, 0xc6,
	0x68, 0x37, 0xbe, 0x0f, 0xdd, 0x60, 0x4a, 0xc4, 0xdc, 0x95, 0x7e, 0xbd, 0x45, 0xeb, 0x5f, 0xc0,
	0x7d, 0x5c, 0xe8, 0xbc, 0x74, 0x52, 0x2b, 0x6e, 0x9d, 0x56, 0xc8, 0xe7, 0x12, 0x13, 0xb4, 0x6c,
	0x87, 0xec, 0x0c, 0xfa, 0xef, 0xd9, 0x2d, 0xdb, 0x25, 0xcb, 0x0b, 0x38, 0xaa, 0xf7, 0xe2, 0x89,
	0xb6, 0xae, 0x2c, 0xd0, 0xb2, 0xbd, 0x41, 0x6b, 0xd4, 0x1d, 0x9f, 0x7d, 0x18, 0xe4, 0x55, 0x40,
	0xc4, 0x17, 0xd0, 0x5d, 0x79, 0xbd, 0xd1, 0xa6, 0xb0, 0x6c, 0x9f, 0x5c, 0xee, 0x7f, 0xe8, 0xf2,
	0x07, 0x6d, 0x8a, 0x78, 0x0c, 0xfd, 0x15, 0x3e, 0x43, 0x95, 0xa2, 0xb1, 0xac, 0x4d, 0x1e, 0xec,
	0x43, 0x8f, 0x6f, 0x09, 0xe0, 0xef, 0xba, 0xf2, 0xb1, 0x6f, 0xa5, 0x5a, 0xb2, 0x83, 0x41, 0x63,
	0xd4, 0x8e, 0xbf, 0x81, 0x93, 0xb5, 0xc4, 0xdc, 0x05, 0x0d, 0x9f, 0x0b, 0xfa, 0x19, 0x1c, 0xad,
	0x3b, 0x86, 0xb8, 0xa3, 0x4f, 0xc6, 0xfd, 0x35, 0x1c, 0xaf, 0xbb, 0xd4, 0xa1, 0x77, 0x3e, 0x13,
	0xfa, 0xd9, 0xe6, 0x49, 0x21, 0xfa, 0x43, 0x1f, 0xfd, 0xf0, 0xcf, 0xd0, 0xbf, 0xd6, 0xb7, 0x2a,
	0xd7, 0x22, 0xfd, 0x8b, 0xc9, 0x43, 0x87, 0xf4, 0xa1, 0x2d, 0xac, 0x45, 0x57, 0xf7, 0xc7, 0x41,
	0x1c, 0x41, 0xab, 0x34, 0x39, 0x15, 0xfd, 0x20, 0xee, 0xc0, 0x8e, 0x95, 0xff, 0xc0, 0xaa, 0xd4,
	0x7d, 0x68, 0x27, 0x6f, 0x31, 0x99, 0xd9, 0xb2, 0xa0, 0xe2, 0xee, 0x0f, 0xff, 0xd5, 0x80, 0x6e,
	0xd5, 0x3d, 0xd7, 0xd2, 0xfa, 0xfe, 0x8c, 0xbf, 0x84, 0xfd, 0x2a, 0x2f, 0x55, 0xc3, 0x7d, 0x22,
	0x2d, 0x23, 0xd8, 0x0b, 0xf7, 0xa2, 0xe3, 0x3e, 0x75, 0xad, 0x43, 0xd8, 0x0d, 0x57, 0x69, 0x51,
	0x21, 0x9e, 0xc2, 0x8e, 0xcf, 0x21, 0x45, 0xb1, 0x35, 0x85, 0xc3, 0x7f, 0x36, 0x20, 0x9a, 0x10,
	0x67, 0x2e, 0x45, 0x9a, 0xa1, 0xa7, 0xc3, 0xd4, 0x7f, 0xe1, 0x6e, 0x39, 0xc7, 0xed, 0x74, 0x20,
	0xf0, 0xeb, 0xe5, 0x1c, 0xfd, 0xf5, 0x8d, 0x50, 0xb3, 0x8a, 0x01, 0xc7, 0x10, 0x59, 0x27, 0x8c,
	0xe3, 0x0b, 0x91, 0x97, 0x75, 0x4e, 0x8e, 0xe0, 0x00, 0x55, 0x5a, 0x2d, 0x85, 0x8e, 0xbf, 0x07,
	0x87, 0x49, 0x69, 0x0c, 0xaa, 0x1a, 0xe9, 0xdb, 0xbd, 0x31, 0x7c, 0x0a, 0x87, 0x57, 0xb9, 0x44,
	0xe5, 0xfe, 0x8a, 0xc6, 0x4a, 0xad, 0xfc, 0x7e, 0x85, 0x54, 0x7c, 0x11, 0x7e, 0x86, 0xf4, 0x0f,
	0xff, 0xb3, 0x0f, 0x51, 0x9d, 0x51, 0xe1, 0x44, 0x0c, 0xd0, 0xac, 0x4a, 0xb3, 0xf7, 0x1e, 0x9d,
	0x9b, 0x9f, 0xa7, 0x33, 0x40, 0x33, 0x99, 0x57, 0x81, 0xf6, 0x60, 0xdf, 0x3a, 0x51, 0x48, 0x25,
	0xaa, 0x30, 0xc3, 0x75, 0xfc, 0x02, 0x2f, 0xc4, 0xbb, 0x8a, 0x93, 0x5f, 0xc1, 0x5e, 0xa1, 0x17,
	0xc8, 0x9f, 0xb1, 0x3d, 0xda, 0xfe, 0xd1, 0xd6, 0xed, 0xff, 0xa4, 0x17, 0xb8, 0x82, 0x8f, 0xd9,
	0xfe, 0x8f, 0x81, 0x33, 0xe8, 0xa7, 0x38, 0xcf, 0xf5, 0x32, 0x70, 0x80, 0xba, 0xae, 0x4d, 0x8d,
	0x16, 0x03, 0xe8, 0x5b, 0x85, 0x86, 0x2b, 0x51, 0x20, 0xb1, 0xed, 0x20, 0xee, 0xc2, 0x9e, 0xb4,
	0x1c, 0xb3, 0x8c, 0x01, 0x15, 0xfd, 0x21, 0x9c, 0x60, 0x96, 0xf1, 0x59, 0xc1, 0x6f, 0x45, 0x3e,
	0xc3, 0x94, 0x3b, 0x61, 0x32, 0x74, 0x2c, 0xf2, 0xe9, 0x8d, 0x1f, 0xc0, 0xf1, 0xa6, 0x95, 0x6a,
	0xc5, 0x3a, 0x64, 0xec, 0xc2, 0x9e, 0x36, 0x32, 0x93, 0x8a, 0x75, 0xeb, 0x4e, 0x7e, 0x8b, 0x32,
	0x7b, 0xeb, 0x78, 0xc1, 0x7a, 0x83, 0xc6, 0xa8, 0xe9, 0xeb, 0x78, 0x1b, 0x56, 0x66, 0x19, 0xeb,
	0xd3, 0xd2, 0x19, 0x1c, 0x49, 0x95, 0xca, 0x85, 0x4c, 0x4b, 0x91, 0x73, 0xe1, 0x9c, 0x48, 0x66,
	0xec, 0x88, 0xfc, 0xcf, 0x21, 0x5e, 0x33, 0xa5, 0xf8, 0x06, 0x95, 0x45, 0x16, 0x7f, 0xc4, 0x56,
	0xe7, 0xfc, 0x78, 0xd5, 0x1a, 0x73, 0x5e, 0x94, 0xb9, 0x93, 0xf3, 0x5c, 0xa2, 0x61, 0x27, 0x74,
	0xd2, 0x73, 0x68, 0xfb, 0xc2, 0x4e, 0x45, 0x9e, 0xb3, 0x7b, 0x94, 0xc8, 0x27, 0xeb, 0x89, 0x7c,
	0x55, 0x8f, 0x84, 0x8b, 0x57, 0x7e, 0x24, 0xf8, 0x3f, 0xaf, 0x52, 0x9f, 0xcc, 0x3b, 0xf9, 0xc4,
	0x3c, 0xf7, 0xc9, 0xbc, 0x3f, 0x68, 0x8c, 0x76, 0xbc, 0x65, 0x2a, 0x9c, 0xcb, 0xd1, 0x56, 0x51,
	0x63, 0xca, 0x4e, 0x6b, 0x31, 0xae, 0x2d, 0x14, 0x74, 0x8a, 0x29, 0x63, 0x2b, 0x99, 0xce, 0x32,
	0x2e, 0x55, 0x52, 0x4e, 0x85, 0xd3, 0xc6, 0xef, 0x76, 0x46, 0x65, 0xf0, 0xe7, 0x18, 0x14, 0xa4,
	0xdf, 0x7e, 0x02, 0xf0, 0xc2, 0xb2, 0x73, 0x3a, 0xe7, 0x04, 0x3a, 0xaa, 0x2c, 0x78, 0x39, 0xcf,
	0x8c, 0x48, 0xd1, 0xb2, 0x07, 0xb4, 0xd3, 0x00, 0x98, 0x48, 0x53, 0xe9, 0xf1, 0x22, 0xe7, 0x9b,
	0xd7, 0x7d, 0x48, 0xd7, 0xed, 0x43, 0xfb, 0x8d, 0x58, 0x68, 0x23, 0x1d, 0xb2, 0x47, 0x75, 0x3d,
	0x94, 0x4c, 0x66, 0x54, 0xfc, 0x2f, 0xe8, 0xd4, 0x23, 0x38, 0x78, 0x63, 0x74, 0x41, 0x6d, 0xc2,
	0x1e, 0x13, 0xe8, 0x01, 0x1c, 0x4f, 0xcb, 0x34, 0x5d, 0xf2, 0x44, 0xa8, 0x74, 0xc9, 0xc5, 0xad,
	0x30, 0x3e, 0xfe, 0x01, 0x19, 0x1f, 0xc1, 0xbd, 0x60, 0x74, 0xda, 0x89, 0xfc, 0xae, 0x0d, 0xd8,
	0x13, 0x3a, 0xf2, 0x1c, 0xe2, 0x34, 0x08, 0x14, 0x5f, 0xa3, 0xd0, 0x90, 0x5c, 0x63, 0x80, 0xda,
	0x96, 0xcc, 0xd9, 0xcf, 0x69, 0xed, 0x37, 0xd0, 0xab, 0x71, 0x95, 0x8d, 0x3d, 0x1d, 0x34, 0x46,
	0xd1, 0xf8, 0xf1, 0xc5, 0x7b, 0xe3, 0xfb, 0x62, 0x53, 0xff, 0x86, 0xff, 0xdb, 0x05, 0x08, 0xa2,
	0x43, 0xfc, 0x7d, 0x04, 0xf7, 0x36, 0xb2, 0xe7, 0xfb, 0x61, 0xee, 0x53, 0xe8, 0x29, 0xdd, 0xf2,
	0x17, 0x2f, 0x2d, 0x1a, 0xba, 0x78, 0x90, 0xdc, 0x5f, 0xc1, 0x8e, 0x43, 0x51, 0x10, 0x1f, 0x3f,
	0x4a, 0xef, 0xd7, 0x28, 0x8a, 0x2b, 0x9d, 0x6b, 0x13, 0xff, 0x16, 0xba, 0xae, 0x74, 0xda, 0xc8,
	0xd0, 0x67, 0x0e, 0xab, 0x51, 0xf8, 0xf8, 0x23, 0x4e, 0x15, 0xee, 0x07, 0x0f, 0xbb, 0x6c, 0xf6,
	0x1b, 0xf1, 0x0b, 0xd8, 0x13, 0x0b, 0xe1, 0x84, 0x21, 0x06, 0x46, 0xe3, 0xa7, 0x1f, 0x5e, 0x2c,
	0x3c, 0x37, 0xc2, 0xc7, 0x4b, 0xc2, 0xfa, 0x1a, 0x14, 0xe2, 0xdd, 0x2a, 0x87, 0xd6, 0x69, 0x23,
	0xb2, 0x40, 0x58, 0xea, 0x21, 0x6f, 0xf4, 0xef, 0x96, 0x95, 0x05, 0xc8, 0xf2, 0x0d, 0x44, 0xa9,
	0x90, 0xf9, 0x92, 0x4f, 0xb5, 0x2a, 0x2d, 0x31, 0x36, 0x1a, 0x0f, 0xb7, 0x9d, 0x78, 0xed, 0xa1,
	0x97, 0x1e, 0x19, 0xff, 0x0e, 0xba, 0xf8, 0xf7, 0x52, 0xce, 0xe7, 0x98, 0x72, 0xd2, 0x6e, 0x22,
	0x74, 0x34, 0xfe, 0xc5, 0x36, 0xdf, 0x9b, 0x0a, 0x1d, 0x14, 0xff, 0x25, 0xf4, 0x13, 0xad, 0x9c,
	0x48, 0x1c, 0xb7, 0xe8, 0x9c, 0x54, 0x99, 0xa5, 0x61, 0x18, 0x8d, 0x7f, 0xb9, 0x6d, 0x83, 0xab,
	0x80, 0xff, 0xa1, 0x82, 0xc7, 0x2f, 0x00, 0x82, 0x9a, 0x27, 0x12, 0x2d, 0xeb, 0x0e, 0x5a, 0xa3,
	0x68, 0x3c, 0xd8, 0xea, 0x1c, 0x90, 0xcb, 0xf8, 0x09, 0x9c, 0x19, 0x2c, 0x84, 0x54, 0x52, 0x65,
	0x3c, 0xd1, 0x29, 0xfa, 0x0a, 0xf3, 0x24, 0x17, 0xb2, 0xb0, 0xa4, 0x38, 0xfe, 0xf9, 0x73, 0x18,
	0x3a, 0xb6, 0x4a, 0x26, 0xa9, 0x4e, 0xb4, 0x29, 0xa1, 0xb4, 0xf7, 0xa5, 0x47, 0x55, 0x5d, 0x46,
	0x7d, 0x4e, 0x0c, 0xe6, 0xb9, 0x4e, 0x66, 0xba, 0x74, 0xdc, 0x8f, 0x9f, 0xc2, 0x92, 0x30, 0xb5,
	0xe2, 0x1b, 0x38, 0xb5, 0x98, 0x68, 0x95, 0x0a, 0xb3, 0xac, 0xde, 0x8b, 0xbc, 0x2a, 0x73, 0xfc,
	0xd3, 0xca, 0x4c, 0x01, 0x4b, 0xcb, 0xa7, 0xb9, 0x48, 0x66, 0xb9, 0xb4, 0x0e, 0x53, 0x12, 0xb1,
	0xf6, 0xf0, 0x06, 0x7a, 0x97, 0x22, 0x99, 0x65, 0x46, 0x97, 0x2a, 0x7d, 0xad, 0x67, 0xa8, 0xfc,
	0x78, 0x76, 0xfe, 0x0b, 0x75, 0x75, 0x27, 0x3e, 0x85, 0x1e, 0xbe, 0x9b, 0x4b, 0x73, 0xd7, 0xf6,
	0xd4, 0xdc, 0x2d, 0x9a, 0x66, 0x0b, 0x1a, 0x48, 0x9d, 0xe1, 0x2d, 0xf4, 0x5f, 0xfa, 0xa7, 0xc7,
	0xb5, 0xcc, 0xd0, 0xba, 0x6d, 0xcf, 0x91, 0x63, 0x88, 0xa6, 0xa5, 0x4a, 0x73, 0xe4, 0x6b, 0x1c,
	0xe9, 0xc1, 0x7e, 0x3d, 0x35, 0x5b, 0x35, 0x8d, 0x36, 0x5f, 0x26, 0xab, 0x97, 0x4b, 0x18, 0x6b,
	0x11, 0xb4, 0x66, 0xb8, 0xa4, 0x99, 0xd6, 0x19, 0xfe, 0x11, 0x3a, 0x1b, 0x29, 0x5d, 0x1f, 0xb1,
	0xa7, 0xd0, 0x0b, 0x33, 0xfe, 0x4e, 0x40, 0x9a, 0x34, 0x41, 0x4e, 0xa1, 0x97, 0x0b, 0x4b, 0xeb,
	0xb5, 0xf0, 0xb4, 0x68, 0xac, 0xff, 0xb7, 0x09, 0x27, 0xdf, 0xd3, 0x2b, 0x7c, 0x22, 0xac, 0xf5,
	0xa5, 0xfe, 0x1e, 0x3d, 0x20, 0x7e, 0x0e, 0xbb, 0x9e, 0x09, 0x9e, 0xe9, 0xad, 0x8f, 0x26, 0x3e,
	0x78, 0x55, 0x1f, 0x98, 0x7a, 0x59, 0x8f, 0x7f, 0x0f, 0x9d, 0x50, 0x2e, 0x1e, 0x7c, 0x9b, 0xe4,
	0xfb, 0xe5, 0xe7, 0x7c, 0x43, 0xd9, 0x68, 0x87, 0x67, 0x10, 0x79, 0x21, 0xaf, 0x9b, 0xaa, 0x45,
	0x1b, 0x3c, 0xdc, 0xaa, 0x5a, 0x5e, 0xa3, 0xbe, 0x82, 0xfd, 0x1a, 0xbe, 0xf3, 0x23, 0xe0, 0x5f,
	0x87, 0x67, 0x48, 0x90, 0x61, 0xb6, 0x4b, 0x1e, 0x4f, 0xb6, 0x45, 0xe8, 0x1d, 0xaf, 0x3c, 0xd0,
	0xd7, 0xc8, 0xa7, 0x36, 0x2d, 0xad, 0xa3, 0x42, 0xd0, 0xdb, 0xc9, 0x6f, 0x94, 0x68, 0xa9, 0x2c,
	0x3d, 0x20, 0x76, 0x2f, 0xdb, 0x7f, 0xdb, 0xa3, 0xff, 0x65, 0xec, 0xe4, 0x67, 0x93, 0xc6, 0xa4,
	0x39, 0x69, 0x4d, 0xc3, 0xef, 0xe7, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xa0, 0x0a, 0x04,
	0x43, 0x0d, 0x00, 0x00,
}
